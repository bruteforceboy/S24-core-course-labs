name: App Python

on:
  push:
    paths:
      - "app_python/**"
      - ".github/workflows/build-app-python.yaml"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: app_python

    - name: Run tests
      run: |
        python -m unittest tests.test_flask_app.FlaskAppTest
      working-directory: app_python

    - name: Lint code with pylint
      run: |
        pip install pylint
        pylint app_python
      working-directory: app_python
      continue-on-error: true
  
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: app_python
    
    # Caches Snyk binary for faster future runs
    - name: Cache Snyk binary
      id: cache-snyk
      uses: actions/cache@v3
      env:
        cache-name: cache-snyk
      with:
        path: app_python/snyk-linux
        key: ${{ runner.os }}-snyk-${{ hashFiles('app_python/snyk-linux') }}
        restore-keys: |
          ${{ runner.os }}-snyk-
          ${{ runner.os }}-

    # Download Snyk CLI if cache is not hit
    - name: Download Snyk CLI
      if: steps.cache-snyk.outputs.cache-hit != 'true'
      run: |
        curl -LO https://github.com/snyk/cli/releases/download/v1.1278.0/snyk-linux
        chmod +x snyk-linux
      working-directory: app_python

    # Run Snyk vulnerability scan
    - name: Run Snyk vulnerability scan
      run: ./snyk-linux test --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      working-directory: app_python

  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - security
      - build
    if: ${{ needs.security.result == 'success' && needs.build.result == 'success'}}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push the Docker image
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: app_python
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/app_python_image:latest